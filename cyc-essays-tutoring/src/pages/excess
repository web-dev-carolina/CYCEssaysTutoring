import React, { Component, useState, useEffect } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import {OverlayTrigger} from 'react-bootstrap';
import {Popover} from 'react-bootstrap';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { fireDb } from '../firebase/firebaseConfig';
import PopupBox from "../components/PopupBox";

const localizer = momentLocalizer(moment);

export default function Registration() {
  const now = new Date();
  const unorgEvents = [];
  const [events, setEvents] = useState([]);
  const [popup, setPopup] = useState(false);
  let id = 0;

  useEffect(() => {
    fireDb
    .ref("/events")
    .on("value", (snapshot) => {
        snapshot.forEach((snap) => {
          let oneE = snap.val();
          unorgEvents.push(
            {
              id: id,
              title: oneE.name,
              start: new Date(oneE.startYear, oneE.startMonth, oneE.startDay, 
                              oneE.startHour, oneE.startMin),
              end: new Date(oneE.endYear, oneE.endMonth, oneE.endDay, 
                            oneE.endHour, oneE.endMin),
              color: oneE.color,
              description: oneE.desc,
            }
          );
          id++;
        });
        setEvents(unorgEvents);
    });
  }, []);

  //Popup to send email to register
  let registerHandler = () => {
    setPopup(!popup);
  }

  function Event({ event }) {
    //Style of popover info
    let starting = event.start.toString().split(" ");
    let startingTime = starting[4].split(":");
    let startDon = " AM";
    if(parseInt(startingTime[0]) > 12) {
      startingTime[0] = parseInt(startingTime[0]) - 12;
      startDon = " PM";
    }
  
    let ending = event.end.toString().split(" ");
    let endingTime = ending[4].split(":");
    let endDon = " AM";
    if(parseInt(endingTime[0]) > 12) {
      endingTime[0] = parseInt(endingTime[0]) - 12;
      endDon = " PM";
    }
  
    let popoverClickRootClose = (
      <Popover id="popover-trigger-click-root-close" style={{ zIndex: 10000, padding: '1%'}}>
        <strong style={{fontSize: '25px'}}>{event.title}</strong><br />
        <div>{startingTime[0]}:{startingTime[1]}{startDon} - {endingTime[0]}:{endingTime[1]}{endDon}</div><br />
        <div style={{fontSize: '18px'}}>{event.description}</div><br />
        {/* <button style={{backgroundColor: '#86b2d1', borderRadius: '5px', border: 'none'}} onClick={registerHandler}>
          Register for this event!
        </button> */}
        {/* <Popup 
          trigger={<button style={{backgroundColor: '#86b2d1', borderRadius: '5px', border: 'none'}}
          modal
          contentStyle={{ maxWidth: "600px", width: "90%" }}>
          Register for this event!
        </button>} 
          position="center">
          <div>Popup content here !!</div>
        </Popup> */}
      </Popover>
    );
  
    // console.log(event);
    return (
      <div>
        <div>
          <OverlayTrigger 
            id="help" 
            trigger="click" 
            rootClose 
            container={this} 
            placement="top" 
            overlay={popoverClickRootClose}>
            <div>{event.title}</div>
          </OverlayTrigger>
        </div>
      </div>
    );
  }

  function eventStyleGetter(event, start, end, isSelected) {
    let backgroundColor = '#' + event.color;
    let style = {
        backgroundColor: backgroundColor,
        borderRadius: '5px',
        opacity: 0.8,
        color: 'black',
        border: '0px',
        display: 'block'
    };
    return {
        style: style
    };
  }

    return (
        <div style={{ height: '500pt' }}>
          <Calendar
            events={events}
            startAccessor="start"
            endAccessor="end"
            defaultDate={moment().toDate()}
            localizer={localizer}
             components={{
              event: Event
            }}
            eventPropGetter={(eventStyleGetter)}
          /> {console.log(popup)}
          {/* {popup ? <PopUp toggle={registerHandler} /> : null} */}
        </div>
    );

}










import React, { Component, useState, useEffect } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import {OverlayTrigger} from 'react-bootstrap';
import {Popover} from 'react-bootstrap';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { fireDb } from '../firebase/firebaseConfig';
import Popup from "reactjs-popup";

const localizer = momentLocalizer(moment);

export default function Registration() {
  const now = new Date();
  const unorgEvents = [];
  const [events, setEvents] = useState([]);
  const [popup, setPopup] = useState(false);
  let id = 0;

  useEffect(() => {
    fireDb
    .ref("/events")
    .on("value", (snapshot) => {
        snapshot.forEach((snap) => {
          let oneE = snap.val();
          unorgEvents.push(
            {
              id: id,
              title: oneE.name,
              start: new Date(oneE.startYear, oneE.startMonth, oneE.startDay, 
                              oneE.startHour, oneE.startMin),
              end: new Date(oneE.endYear, oneE.endMonth, oneE.endDay, 
                            oneE.endHour, oneE.endMin),
              color: oneE.color,
              description: oneE.desc,
            }
          );
          id++;
        });
        setEvents(unorgEvents);
    });
  }, []);

  //Popup to send email to register
  let registerHandler = () => {
    setPopup(!popup);
  }

  function Event({ event }) {
    //Style of popover info
    let starting = event.start.toString().split(" ");
    let startingTime = starting[4].split(":");
    let startDon = " AM";
    if(parseInt(startingTime[0]) > 12) {
      startingTime[0] = parseInt(startingTime[0]) - 12;
      startDon = " PM";
    }
  
    let ending = event.end.toString().split(" ");
    let endingTime = ending[4].split(":");
    let endDon = " AM";
    if(parseInt(endingTime[0]) > 12) {
      endingTime[0] = parseInt(endingTime[0]) - 12;
      endDon = " PM";
    }
  
    let popoverClickRootClose = (
      <Popover id="popover-trigger-click-root-close" style={{ zIndex: 10000, padding: '1%'}}>
        <strong style={{fontSize: '25px'}}>{event.title}</strong><br />
        <div>{startingTime[0]}:{startingTime[1]}{startDon} - {endingTime[0]}:{endingTime[1]}{endDon}</div><br />
        <div style={{fontSize: '18px'}}>{event.description}</div><br />
        <button style={{backgroundColor: '#86b2d1', borderRadius: '5px', border: 'none'}} onClick={registerHandler}>
          Register for this event!
        </button>
      </Popover>
    );
  
    // console.log(event);
    return (
      <div>
        <div>
          <OverlayTrigger 
            id="help" 
            trigger="click" 
            rootClose 
            container={this} 
            placement="top" 
            overlay={popoverClickRootClose}>
            <div>{event.title}</div>
          </OverlayTrigger>
        </div>
      </div>
    );
  }

  function eventStyleGetter(event, start, end, isSelected) {
    let backgroundColor = '#' + event.color;
    let style = {
        backgroundColor: backgroundColor,
        borderRadius: '5px',
        opacity: 0.8,
        color: 'black',
        border: '0px',
        display: 'block'
    };
    return {
        style: style
    };
  }

    return (
        <div style={{ height: '500pt' }}>
          <Calendar
            events={events}
            startAccessor="start"
            endAccessor="end"
            defaultDate={moment().toDate()}
            localizer={localizer}
             components={{
              event: Event
            }}
            eventPropGetter={(eventStyleGetter)}
          /> {console.log(popup)}
          {popup ? <PopUp toggle={registerHandler} /> : null}
        </div>
    );

}
